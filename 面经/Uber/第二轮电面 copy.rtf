{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red67\green67\blue67;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
/*\
\
    Write a function that can make up to 10 http requests in parallel\
    returning the results in request-order:\
\
    f (["http://uber.com", "http://google.com"]) // \
\
    -> ["uber response", "google response"] // \
    \
\
    Notes:\
\
    This question is appropriate for C/C++/Java/Python and similar languages.\
    Please do not switch to JavaScript. If you would like to answer a\
    JavaScript question, a more challenging question awaits.\
\
    "Up to 10" means "reasonably bounded concurrency"; the number 10 is\
    not important. Your answer might be different if I said 1000 requests.\
\
    Simple "GET" requests are ok. The result should contain the response body.\
\
    In parallel we strictly mean a "fanout" type scenario, where multiple\
    requests are being processed by servers at the same time. This can be\
    implemented with or without multiple threads or processes.\
\
    You're allowed to use all resources available to you to complete the task\
    (i.e. docs, stackoverflow etc) to complete the task within the timeframe.\
\
    Don't worry if you don't complete the question! Try to tackle the problem\
    in small stages with running code at each stage. I expect to see running\
    code.\
\
    Please avoid nasty things like spin looping or other inefficient techniques.\
\
    Don't worry too much about error handling to begin with, this is an\
    interview question!\
\
    Good Luck :)\
\
*/\
\
\
//     f (["http://uber.com", "http://google.com"]) // \
//     -> ["uber response", "google response"] // \
import java.util.*;\
\
class Solution implements Runnable\{\
    String http;\
    String res;\
    public Solution(String http) \{\
        this.http = http;\
        res = null;\
    \}\
\
    public void run()\{\
        // convert it here\
        \
        // res += sub;\
        \
        // uber response\
        System.out.println(http);\
    \}\
\
    public static void main(String[] args) \{\
        List<Thread> threads = new ArrayList();\
        List<String> https = Arrays.asList("http://uber.com", "http://google.com");\
        for (String http : https) \{\
            threads.add(new Thread(new Solution(http)));\
            // (new Thread(new Solution(http))).start();\
        \}\
        \
        for (Thread t : threads) \{\
            t.start();\
        \}\
        for (Thread t : threads) \{\
            t.join();\
        \}\
    \}\
\}\
\
// https://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html\
// https://docs.oracle.com/javase/tutorial/essential/concurrency/join.html\
\
\
}