Algorithms!!


// 游戏保证赢：guarantee player1 win, 也就是保证对手输，如果对手赢的可能性为0，也就是试过所有的可能，对手都不会赢，那么p1就一定赢

## Dynamic Programming
1. boundary cases
2. general cases: Suppose we have already known how to convertword1[0..i - 2] to word2[0..j - 2], which is dp[i - 1][j - 1]. Now let's consider word[i - 1] and word2[j - 1]. If they are euqal, then no more operation is needed and dp[i][j] = dp[i - 1][j - 1]. Well, what if they are not equal?

Veda大神解题思路的经验：
对于n <= 16，找2^n的解法确实是套路。
n <= 200，找n^3
n <= 3000，找n^2
其他的找n * log(n)
这是我之前做题的经验。

3. n % 4 ... (n & 0b11) , Java 无符号右移用 >>> 

*** palindrome problem: 从中间向两边走，
i-j <-> i+j 或者 i-j+1 <-> i+j

## dp 状态：
初始状态，变化后的状态
分成2个case：
1. boundary case， 2. general case
-> i == 0, j != 0 的时候，先解决boundary case（比如empty string，dp[i][0]），dp[i][0] = what, or dp[0][j] = what
然后是一般的情况（非空string），convert to smaller problems：
-> 已知how to convert word1[0...i-2] to word2[0...j-2], which is dp[i-1][j-1]，那么如何求 word1[i - 1] to word2[j-1]呢？
	0. word1[i - 1] == word2[j-1], 那么dp[i][j] = dp[i-1][j-1]
	1. replace: 将word1[i-1]替代成word2[j-1], dp[i][j] = dp[i-1][j-1] + 1
	2. delete: 将word1[i-1] 删除，word1[0...i-2] == word2[0...j-1], dp[i][j] = dp[i-1][j] + 1
	3. insert: 在word1[i-1]后增加word2[j-1], 使得word1[0...i-1] + word2[j-1] == word2[0...j-1]，两边同时删除word2[j-1]，所以word1[0...i-1]  == word2[j-2]，所以 dp[i][j] = dp[i][j－1]。

将上面的各种情况放一起：
dp[i][0] = i;
dp[0][j] = j;
dp[i][j] = dp[i-1][j-1] (equal)
dp[i][j] = Math.min(
	dp[i-1][j-1] + 1 (replace)
	dp[i-1][j] + 1 (delete)
	dp[i][j-1] + 1 (insert)
	)


## Union Find

## Backtracking
vis[] 可以返回之前的数， permutation问题

if(vis[i] || i > 0 && nums[i] == nums[i - 1] && !vis[i - 1]) continue; 在从头到尾的permutation类似题中，用来解决可以有重复数字，但不能有重复的 collection

for (i = start; i < size; i++)
	dfs(... i + 1);
用start只能往后走，不能重复之前走过的

if (i > start && nums[i] == nums[i - 1]) continue; 排除只能往后走的形式中的重复的set。


## Binary Search

## Divide and Conquer


377. Combination Sum IV
序列顺序matter 12和21不一样
comb[target] = sum(comb[target - num[i]])
comb[4] = comb[4-1] + comb[4-2] + comb[4-3]

## Graph
* Dijkstra's 
* Floyd-Warshall
* Ford-Fulkerson
* Kruskal's

## Sorting

## Linked List

## greedy algorithm
* Kruskal's algorithm
* Dijkstra's shortest path algorithm
* Boruvka'a algorithm
* Prim's algorithm
* Reverse-delete algorithm

Java Tips
1. int[] to ArrayList<Integer>:

Arrays.stream(nums).boxed().collect(Collectors.toList());

2. Swift char->Int 
UnicodeScalar("A").value

3. don't use mid = (s + e)/2 
    use mid = s + (e - s)/2 instead

4. string -> integer: parseInt(), parseDouble()

5. split() string->string[]

6. iterator hashmap()

for (Map.Entry<String, String> entry : map.entrySet()) {     System.out.println(entry.getKey() + "/" + entry.getValue()); }



7. list<>() 是class。不能重复使用同一个 list，修改之后会影响之前的存储信息。

8. string to character［］

Character[] array = new Character[len];
   for (int i = 0; i < len ; i++) {
      array[i] = new Character(s.charAt(i));
   }

／／／／／／
String str = "testString";
char[] charArray = str.toCharArray();
Character[] charObjectArray = ArrayUtils.toObject(charArray);

9. char to String
Character.toString((char) i)
String.valueOf(ch)

10. 将 LinkedList 掉头

11. Char -> integer:  Character.getNumericValue()

12. split "integer" and "string" in a string into string[]

// digits + string
String[] a = abbr.split("(?<=\\D)(?=\\d)");

// string + digits
String[] a2 = a[i].split("(?<=\\d)(?=\\D)");

13. random number in java
------------------
Random rand = new Random(); 
int value = rand.nextInt(50); 
------------------
double random = Math.random() * 50 + 1;
or
int random = (int )(Math.random() * 50 + 1);
------------------

14. exchange two values:

      array[index] ^= array[i];
      array[i] ^= array[index];
      array[index] ^= array[i];

15. 
new ArrayList(some HashSet)

Set<T> mySet = new HashSet<T>(Arrays.asList(someArray));


16. int[] array = res.stream().mapToInt(i->i).toArray();

17. 
Arrays.copyOf(src[], length)
System.arraycopy(src[], startidx, tar
[], startidx, len)

18. sort((a,b) -> (a-b)) a,b 升序


19. 
Comparable<classname>{
	@Override
	public int compareTo(class that) {
		return this.val - that.val;
	}
}

Comparator<classname> {
	@Override
	public int compare(class a, class b) {
		return a.val - b.val;
	}
}

Arrays.sort(pre, new Comparator<int[]>{
 @Override
 public int compare(int[] a, int[] b) {
   return int.compare(a[1], b[1]);
 }
});

PriorityQueue<Interval> q = new PriorityQueue<Interval>(new Comparator<Interval>() {
            public int compare(Interval a, Interval b) {
                return a.end - b.end;
            } 
        });


20. list to array: 
list.toArray(new int[people.length][2]);

21. String[] arr = new String[0];
arr[0]

22。 根据string中数字的大小排序：
Arrays.sort(arr, new Comparator<String>(){
            public int compare(String a, String b) {
                String s1 = a + b, s2 = b + a;
                return s2.compareTo(s1);
            }
        });